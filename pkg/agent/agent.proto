syntax = "proto3";

package agent;

import "google/protobuf/any.proto";

option go_package = "github.com/sefaphlvn/clustereye-test/pkg/agent";

message AgentInfo {
  string key = 1;
  string agent_id = 2;
  string hostname = 3;
  string ip = 4;
  string platform = 5;
  bool auth = 6;
  string test = 7;
  string postgres_user = 8;
  string postgres_pass = 9;
}

message PostgresInfo {
  string cluster_name = 1;
  string ip = 2;
  string hostname = 3;
  string node_status = 4;
  string pg_version = 5;
  string location = 6;
  string pg_bouncer_status = 7;
  string pg_service_status = 8;
  int64 replication_lag_sec = 9;
  string free_disk = 10;
  int32 fd_percent = 11;
}

message Query {
  string query_id = 1;
  string command = 2;
}

message QueryResult {
  string query_id = 1;
  google.protobuf.Any result = 2;
}

message Error {
  string code = 1;
  string message = 2;
}

message RegistrationResult {
  string status = 1;
  string message = 2;
}

// Sadece agent kaydı için kullanılacak mesajlar
message RegisterRequest {
  AgentInfo agent_info = 1;
}

message RegisterResponse {
  RegistrationResult registration = 1;
}

// Query için kullanılacak mesajlar
message QueryRequest {
  Query query = 1;
}

message QueryResponse {
  QueryResult result = 1;
}

// PostgreSQL bilgileri için kullanılacak mesajlar
message PostgresInfoRequest {
   PostgresInfo postgres_info = 1;
}

message PostgresInfoResponse {
  string status = 1;
}

// Genel hata mesajı
message ErrorResponse {
  Error error = 1;
}

// Server'dan agent'a gönderilecek mesajlar
message ServerMessage {
  oneof payload {
    Query query = 1;
    Error error = 2;
    RegistrationResult registration = 3;
  }
}

// Eski mesaj yapıları (geriye dönük uyumluluk için)
message AgentMessage {
  oneof payload {
    AgentInfo agent_info = 1;
    QueryResult query_result = 2;
    PostgresInfo postgres_info = 3;
  }
}

service AgentService {
  // Eski bağlantı metodu (geriye dönük uyumluluk için)
  rpc Connect(stream AgentMessage) returns (stream ServerMessage);
  
  // Yeni metodlar...
  rpc Register(RegisterRequest) returns (RegisterResponse);
  
  // Query işlemleri için kullanılacak servis
  rpc ExecuteQuery(QueryRequest) returns (QueryResponse);
  
  // PostgreSQL bilgilerini göndermek için kullanılacak servis
  rpc SendPostgresInfo(PostgresInfoRequest) returns (PostgresInfoResponse);
  
  // Sürekli veri akışı gerektiren durumlar için stream servisleri
  rpc StreamQueries(stream QueryRequest) returns (stream QueryResponse);
  rpc StreamPostgresInfo(stream PostgresInfoRequest) returns (stream PostgresInfoResponse);
}