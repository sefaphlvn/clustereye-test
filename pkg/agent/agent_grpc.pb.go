// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/agent/agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentService_Connect_FullMethodName                 = "/agent.AgentService/Connect"
	AgentService_Register_FullMethodName                = "/agent.AgentService/Register"
	AgentService_ExecuteQuery_FullMethodName            = "/agent.AgentService/ExecuteQuery"
	AgentService_SendPostgresInfo_FullMethodName        = "/agent.AgentService/SendPostgresInfo"
	AgentService_StreamQueries_FullMethodName           = "/agent.AgentService/StreamQueries"
	AgentService_StreamPostgresInfo_FullMethodName      = "/agent.AgentService/StreamPostgresInfo"
	AgentService_SendSystemMetrics_FullMethodName       = "/agent.AgentService/SendSystemMetrics"
	AgentService_GetAlarmConfigurations_FullMethodName  = "/agent.AgentService/GetAlarmConfigurations"
	AgentService_ReportAlarm_FullMethodName             = "/agent.AgentService/ReportAlarm"
	AgentService_SendMongoInfo_FullMethodName           = "/agent.AgentService/SendMongoInfo"
	AgentService_ListMongoLogs_FullMethodName           = "/agent.AgentService/ListMongoLogs"
	AgentService_AnalyzeMongoLog_FullMethodName         = "/agent.AgentService/AnalyzeMongoLog"
	AgentService_ListPostgresLogs_FullMethodName        = "/agent.AgentService/ListPostgresLogs"
	AgentService_AnalyzePostgresLog_FullMethodName      = "/agent.AgentService/AnalyzePostgresLog"
	AgentService_ReadPostgresConfig_FullMethodName      = "/agent.AgentService/ReadPostgresConfig"
	AgentService_GetThresholdSettings_FullMethodName    = "/agent.AgentService/GetThresholdSettings"
	AgentService_ReportVersion_FullMethodName           = "/agent.AgentService/ReportVersion"
	AgentService_PromoteMongoToPrimary_FullMethodName   = "/agent.AgentService/PromoteMongoToPrimary"
	AgentService_FreezeMongoSecondary_FullMethodName    = "/agent.AgentService/FreezeMongoSecondary"
	AgentService_PromotePostgresToMaster_FullMethodName = "/agent.AgentService/PromotePostgresToMaster"
	AgentService_GetJob_FullMethodName                  = "/agent.AgentService/GetJob"
	AgentService_ListJobs_FullMethodName                = "/agent.AgentService/ListJobs"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	// Eski bağlantı metodu (geriye dönük uyumluluk için)
	Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentMessage, ServerMessage], error)
	// Yeni metodlar...
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Query işlemleri için kullanılacak servis
	ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// PostgreSQL bilgilerini göndermek için kullanılacak servis
	SendPostgresInfo(ctx context.Context, in *PostgresInfoRequest, opts ...grpc.CallOption) (*PostgresInfoResponse, error)
	// Sürekli veri akışı gerektiren durumlar için stream servisleri.
	StreamQueries(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[QueryRequest, QueryResponse], error)
	StreamPostgresInfo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PostgresInfoRequest, PostgresInfoResponse], error)
	SendSystemMetrics(ctx context.Context, in *SystemMetricsRequest, opts ...grpc.CallOption) (*SystemMetricsResponse, error)
	// Agent'a alarm yapılandırmalarını göndermek için
	GetAlarmConfigurations(ctx context.Context, in *AlarmConfigRequest, opts ...grpc.CallOption) (*AlarmConfigResponse, error)
	// Agent'ın alarm bildirmesi için
	ReportAlarm(ctx context.Context, in *ReportAlarmRequest, opts ...grpc.CallOption) (*ReportAlarmResponse, error)
	// MongoDB bilgilerini göndermek için kullanılacak servis
	SendMongoInfo(ctx context.Context, in *MongoInfoRequest, opts ...grpc.CallOption) (*MongoInfoResponse, error)
	// MongoDB log dosyalarını listeler
	ListMongoLogs(ctx context.Context, in *MongoLogListRequest, opts ...grpc.CallOption) (*MongoLogListResponse, error)
	// MongoDB log dosyasını analiz eder
	AnalyzeMongoLog(ctx context.Context, in *MongoLogAnalyzeRequest, opts ...grpc.CallOption) (*MongoLogAnalyzeResponse, error)
	// List PostgreSQL log files
	ListPostgresLogs(ctx context.Context, in *PostgresLogListRequest, opts ...grpc.CallOption) (*PostgresLogListResponse, error)
	// PostgreSQL log dosyasını analiz eder
	AnalyzePostgresLog(ctx context.Context, in *PostgresLogAnalyzeRequest, opts ...grpc.CallOption) (*PostgresLogAnalyzeResponse, error)
	// PostgreSQL config dosyasını okur
	ReadPostgresConfig(ctx context.Context, in *PostgresConfigRequest, opts ...grpc.CallOption) (*PostgresConfigResponse, error)
	// Threshold ayarları için yeni RPC metodu
	GetThresholdSettings(ctx context.Context, in *GetThresholdSettingsRequest, opts ...grpc.CallOption) (*GetThresholdSettingsResponse, error)
	// Yeni versiyon bildirimi metodu
	ReportVersion(ctx context.Context, in *ReportVersionRequest, opts ...grpc.CallOption) (*ReportVersionResponse, error)
	// Job related methods
	PromoteMongoToPrimary(ctx context.Context, in *MongoPromotePrimaryRequest, opts ...grpc.CallOption) (*MongoPromotePrimaryResponse, error)
	FreezeMongoSecondary(ctx context.Context, in *MongoFreezeSecondaryRequest, opts ...grpc.CallOption) (*MongoFreezeSecondaryResponse, error)
	PromotePostgresToMaster(ctx context.Context, in *PostgresPromoteMasterRequest, opts ...grpc.CallOption) (*PostgresPromoteMasterResponse, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentMessage, ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], AgentService_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgentMessage, ServerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_ConnectClient = grpc.BidiStreamingClient[AgentMessage, ServerMessage]

func (c *agentServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AgentService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, AgentService_ExecuteQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SendPostgresInfo(ctx context.Context, in *PostgresInfoRequest, opts ...grpc.CallOption) (*PostgresInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostgresInfoResponse)
	err := c.cc.Invoke(ctx, AgentService_SendPostgresInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) StreamQueries(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[QueryRequest, QueryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[1], AgentService_StreamQueries_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryRequest, QueryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StreamQueriesClient = grpc.BidiStreamingClient[QueryRequest, QueryResponse]

func (c *agentServiceClient) StreamPostgresInfo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PostgresInfoRequest, PostgresInfoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[2], AgentService_StreamPostgresInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PostgresInfoRequest, PostgresInfoResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StreamPostgresInfoClient = grpc.BidiStreamingClient[PostgresInfoRequest, PostgresInfoResponse]

func (c *agentServiceClient) SendSystemMetrics(ctx context.Context, in *SystemMetricsRequest, opts ...grpc.CallOption) (*SystemMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemMetricsResponse)
	err := c.cc.Invoke(ctx, AgentService_SendSystemMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetAlarmConfigurations(ctx context.Context, in *AlarmConfigRequest, opts ...grpc.CallOption) (*AlarmConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlarmConfigResponse)
	err := c.cc.Invoke(ctx, AgentService_GetAlarmConfigurations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ReportAlarm(ctx context.Context, in *ReportAlarmRequest, opts ...grpc.CallOption) (*ReportAlarmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAlarmResponse)
	err := c.cc.Invoke(ctx, AgentService_ReportAlarm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SendMongoInfo(ctx context.Context, in *MongoInfoRequest, opts ...grpc.CallOption) (*MongoInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MongoInfoResponse)
	err := c.cc.Invoke(ctx, AgentService_SendMongoInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ListMongoLogs(ctx context.Context, in *MongoLogListRequest, opts ...grpc.CallOption) (*MongoLogListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MongoLogListResponse)
	err := c.cc.Invoke(ctx, AgentService_ListMongoLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AnalyzeMongoLog(ctx context.Context, in *MongoLogAnalyzeRequest, opts ...grpc.CallOption) (*MongoLogAnalyzeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MongoLogAnalyzeResponse)
	err := c.cc.Invoke(ctx, AgentService_AnalyzeMongoLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ListPostgresLogs(ctx context.Context, in *PostgresLogListRequest, opts ...grpc.CallOption) (*PostgresLogListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostgresLogListResponse)
	err := c.cc.Invoke(ctx, AgentService_ListPostgresLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AnalyzePostgresLog(ctx context.Context, in *PostgresLogAnalyzeRequest, opts ...grpc.CallOption) (*PostgresLogAnalyzeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostgresLogAnalyzeResponse)
	err := c.cc.Invoke(ctx, AgentService_AnalyzePostgresLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ReadPostgresConfig(ctx context.Context, in *PostgresConfigRequest, opts ...grpc.CallOption) (*PostgresConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostgresConfigResponse)
	err := c.cc.Invoke(ctx, AgentService_ReadPostgresConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetThresholdSettings(ctx context.Context, in *GetThresholdSettingsRequest, opts ...grpc.CallOption) (*GetThresholdSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThresholdSettingsResponse)
	err := c.cc.Invoke(ctx, AgentService_GetThresholdSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ReportVersion(ctx context.Context, in *ReportVersionRequest, opts ...grpc.CallOption) (*ReportVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportVersionResponse)
	err := c.cc.Invoke(ctx, AgentService_ReportVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) PromoteMongoToPrimary(ctx context.Context, in *MongoPromotePrimaryRequest, opts ...grpc.CallOption) (*MongoPromotePrimaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MongoPromotePrimaryResponse)
	err := c.cc.Invoke(ctx, AgentService_PromoteMongoToPrimary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) FreezeMongoSecondary(ctx context.Context, in *MongoFreezeSecondaryRequest, opts ...grpc.CallOption) (*MongoFreezeSecondaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MongoFreezeSecondaryResponse)
	err := c.cc.Invoke(ctx, AgentService_FreezeMongoSecondary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) PromotePostgresToMaster(ctx context.Context, in *PostgresPromoteMasterRequest, opts ...grpc.CallOption) (*PostgresPromoteMasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostgresPromoteMasterResponse)
	err := c.cc.Invoke(ctx, AgentService_PromotePostgresToMaster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, AgentService_GetJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, AgentService_ListJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility.
type AgentServiceServer interface {
	// Eski bağlantı metodu (geriye dönük uyumluluk için)
	Connect(grpc.BidiStreamingServer[AgentMessage, ServerMessage]) error
	// Yeni metodlar...
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Query işlemleri için kullanılacak servis
	ExecuteQuery(context.Context, *QueryRequest) (*QueryResponse, error)
	// PostgreSQL bilgilerini göndermek için kullanılacak servis
	SendPostgresInfo(context.Context, *PostgresInfoRequest) (*PostgresInfoResponse, error)
	// Sürekli veri akışı gerektiren durumlar için stream servisleri.
	StreamQueries(grpc.BidiStreamingServer[QueryRequest, QueryResponse]) error
	StreamPostgresInfo(grpc.BidiStreamingServer[PostgresInfoRequest, PostgresInfoResponse]) error
	SendSystemMetrics(context.Context, *SystemMetricsRequest) (*SystemMetricsResponse, error)
	// Agent'a alarm yapılandırmalarını göndermek için
	GetAlarmConfigurations(context.Context, *AlarmConfigRequest) (*AlarmConfigResponse, error)
	// Agent'ın alarm bildirmesi için
	ReportAlarm(context.Context, *ReportAlarmRequest) (*ReportAlarmResponse, error)
	// MongoDB bilgilerini göndermek için kullanılacak servis
	SendMongoInfo(context.Context, *MongoInfoRequest) (*MongoInfoResponse, error)
	// MongoDB log dosyalarını listeler
	ListMongoLogs(context.Context, *MongoLogListRequest) (*MongoLogListResponse, error)
	// MongoDB log dosyasını analiz eder
	AnalyzeMongoLog(context.Context, *MongoLogAnalyzeRequest) (*MongoLogAnalyzeResponse, error)
	// List PostgreSQL log files
	ListPostgresLogs(context.Context, *PostgresLogListRequest) (*PostgresLogListResponse, error)
	// PostgreSQL log dosyasını analiz eder
	AnalyzePostgresLog(context.Context, *PostgresLogAnalyzeRequest) (*PostgresLogAnalyzeResponse, error)
	// PostgreSQL config dosyasını okur
	ReadPostgresConfig(context.Context, *PostgresConfigRequest) (*PostgresConfigResponse, error)
	// Threshold ayarları için yeni RPC metodu
	GetThresholdSettings(context.Context, *GetThresholdSettingsRequest) (*GetThresholdSettingsResponse, error)
	// Yeni versiyon bildirimi metodu
	ReportVersion(context.Context, *ReportVersionRequest) (*ReportVersionResponse, error)
	// Job related methods
	PromoteMongoToPrimary(context.Context, *MongoPromotePrimaryRequest) (*MongoPromotePrimaryResponse, error)
	FreezeMongoSecondary(context.Context, *MongoFreezeSecondaryRequest) (*MongoFreezeSecondaryResponse, error)
	PromotePostgresToMaster(context.Context, *PostgresPromoteMasterRequest) (*PostgresPromoteMasterResponse, error)
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServiceServer struct{}

func (UnimplementedAgentServiceServer) Connect(grpc.BidiStreamingServer[AgentMessage, ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedAgentServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAgentServiceServer) ExecuteQuery(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (UnimplementedAgentServiceServer) SendPostgresInfo(context.Context, *PostgresInfoRequest) (*PostgresInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPostgresInfo not implemented")
}
func (UnimplementedAgentServiceServer) StreamQueries(grpc.BidiStreamingServer[QueryRequest, QueryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamQueries not implemented")
}
func (UnimplementedAgentServiceServer) StreamPostgresInfo(grpc.BidiStreamingServer[PostgresInfoRequest, PostgresInfoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPostgresInfo not implemented")
}
func (UnimplementedAgentServiceServer) SendSystemMetrics(context.Context, *SystemMetricsRequest) (*SystemMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSystemMetrics not implemented")
}
func (UnimplementedAgentServiceServer) GetAlarmConfigurations(context.Context, *AlarmConfigRequest) (*AlarmConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlarmConfigurations not implemented")
}
func (UnimplementedAgentServiceServer) ReportAlarm(context.Context, *ReportAlarmRequest) (*ReportAlarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAlarm not implemented")
}
func (UnimplementedAgentServiceServer) SendMongoInfo(context.Context, *MongoInfoRequest) (*MongoInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMongoInfo not implemented")
}
func (UnimplementedAgentServiceServer) ListMongoLogs(context.Context, *MongoLogListRequest) (*MongoLogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMongoLogs not implemented")
}
func (UnimplementedAgentServiceServer) AnalyzeMongoLog(context.Context, *MongoLogAnalyzeRequest) (*MongoLogAnalyzeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeMongoLog not implemented")
}
func (UnimplementedAgentServiceServer) ListPostgresLogs(context.Context, *PostgresLogListRequest) (*PostgresLogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostgresLogs not implemented")
}
func (UnimplementedAgentServiceServer) AnalyzePostgresLog(context.Context, *PostgresLogAnalyzeRequest) (*PostgresLogAnalyzeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzePostgresLog not implemented")
}
func (UnimplementedAgentServiceServer) ReadPostgresConfig(context.Context, *PostgresConfigRequest) (*PostgresConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPostgresConfig not implemented")
}
func (UnimplementedAgentServiceServer) GetThresholdSettings(context.Context, *GetThresholdSettingsRequest) (*GetThresholdSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThresholdSettings not implemented")
}
func (UnimplementedAgentServiceServer) ReportVersion(context.Context, *ReportVersionRequest) (*ReportVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportVersion not implemented")
}
func (UnimplementedAgentServiceServer) PromoteMongoToPrimary(context.Context, *MongoPromotePrimaryRequest) (*MongoPromotePrimaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteMongoToPrimary not implemented")
}
func (UnimplementedAgentServiceServer) FreezeMongoSecondary(context.Context, *MongoFreezeSecondaryRequest) (*MongoFreezeSecondaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeMongoSecondary not implemented")
}
func (UnimplementedAgentServiceServer) PromotePostgresToMaster(context.Context, *PostgresPromoteMasterRequest) (*PostgresPromoteMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotePostgresToMaster not implemented")
}
func (UnimplementedAgentServiceServer) GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedAgentServiceServer) ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}
func (UnimplementedAgentServiceServer) testEmbeddedByValue()                      {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).Connect(&grpc.GenericServerStream[AgentMessage, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_ConnectServer = grpc.BidiStreamingServer[AgentMessage, ServerMessage]

func _AgentService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ExecuteQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ExecuteQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SendPostgresInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostgresInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SendPostgresInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SendPostgresInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SendPostgresInfo(ctx, req.(*PostgresInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_StreamQueries_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).StreamQueries(&grpc.GenericServerStream[QueryRequest, QueryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StreamQueriesServer = grpc.BidiStreamingServer[QueryRequest, QueryResponse]

func _AgentService_StreamPostgresInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).StreamPostgresInfo(&grpc.GenericServerStream[PostgresInfoRequest, PostgresInfoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StreamPostgresInfoServer = grpc.BidiStreamingServer[PostgresInfoRequest, PostgresInfoResponse]

func _AgentService_SendSystemMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SendSystemMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SendSystemMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SendSystemMetrics(ctx, req.(*SystemMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetAlarmConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetAlarmConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetAlarmConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetAlarmConfigurations(ctx, req.(*AlarmConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ReportAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ReportAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ReportAlarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ReportAlarm(ctx, req.(*ReportAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SendMongoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SendMongoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SendMongoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SendMongoInfo(ctx, req.(*MongoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ListMongoLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ListMongoLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ListMongoLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ListMongoLogs(ctx, req.(*MongoLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AnalyzeMongoLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoLogAnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AnalyzeMongoLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_AnalyzeMongoLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AnalyzeMongoLog(ctx, req.(*MongoLogAnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ListPostgresLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostgresLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ListPostgresLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ListPostgresLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ListPostgresLogs(ctx, req.(*PostgresLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AnalyzePostgresLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostgresLogAnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AnalyzePostgresLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_AnalyzePostgresLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AnalyzePostgresLog(ctx, req.(*PostgresLogAnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ReadPostgresConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostgresConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ReadPostgresConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ReadPostgresConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ReadPostgresConfig(ctx, req.(*PostgresConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetThresholdSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThresholdSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetThresholdSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetThresholdSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetThresholdSettings(ctx, req.(*GetThresholdSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ReportVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ReportVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ReportVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ReportVersion(ctx, req.(*ReportVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_PromoteMongoToPrimary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoPromotePrimaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).PromoteMongoToPrimary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_PromoteMongoToPrimary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).PromoteMongoToPrimary(ctx, req.(*MongoPromotePrimaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_FreezeMongoSecondary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoFreezeSecondaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).FreezeMongoSecondary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_FreezeMongoSecondary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).FreezeMongoSecondary(ctx, req.(*MongoFreezeSecondaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_PromotePostgresToMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostgresPromoteMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).PromotePostgresToMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_PromotePostgresToMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).PromotePostgresToMaster(ctx, req.(*PostgresPromoteMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AgentService_Register_Handler,
		},
		{
			MethodName: "ExecuteQuery",
			Handler:    _AgentService_ExecuteQuery_Handler,
		},
		{
			MethodName: "SendPostgresInfo",
			Handler:    _AgentService_SendPostgresInfo_Handler,
		},
		{
			MethodName: "SendSystemMetrics",
			Handler:    _AgentService_SendSystemMetrics_Handler,
		},
		{
			MethodName: "GetAlarmConfigurations",
			Handler:    _AgentService_GetAlarmConfigurations_Handler,
		},
		{
			MethodName: "ReportAlarm",
			Handler:    _AgentService_ReportAlarm_Handler,
		},
		{
			MethodName: "SendMongoInfo",
			Handler:    _AgentService_SendMongoInfo_Handler,
		},
		{
			MethodName: "ListMongoLogs",
			Handler:    _AgentService_ListMongoLogs_Handler,
		},
		{
			MethodName: "AnalyzeMongoLog",
			Handler:    _AgentService_AnalyzeMongoLog_Handler,
		},
		{
			MethodName: "ListPostgresLogs",
			Handler:    _AgentService_ListPostgresLogs_Handler,
		},
		{
			MethodName: "AnalyzePostgresLog",
			Handler:    _AgentService_AnalyzePostgresLog_Handler,
		},
		{
			MethodName: "ReadPostgresConfig",
			Handler:    _AgentService_ReadPostgresConfig_Handler,
		},
		{
			MethodName: "GetThresholdSettings",
			Handler:    _AgentService_GetThresholdSettings_Handler,
		},
		{
			MethodName: "ReportVersion",
			Handler:    _AgentService_ReportVersion_Handler,
		},
		{
			MethodName: "PromoteMongoToPrimary",
			Handler:    _AgentService_PromoteMongoToPrimary_Handler,
		},
		{
			MethodName: "FreezeMongoSecondary",
			Handler:    _AgentService_FreezeMongoSecondary_Handler,
		},
		{
			MethodName: "PromotePostgresToMaster",
			Handler:    _AgentService_PromotePostgresToMaster_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _AgentService_GetJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _AgentService_ListJobs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _AgentService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamQueries",
			Handler:       _AgentService_StreamQueries_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamPostgresInfo",
			Handler:       _AgentService_StreamPostgresInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/agent/agent.proto",
}
